<?php
namespace frontend\controllers;

use common\models\Balans;
use common\models\Investments;
use common\models\PropertyType;
use common\models\Purpose;
use common\models\NetCity;
use common\models\NetCountry;
use common\models\Packet;
use common\models\Resume;
use common\models\Seo;
use common\models\Transactions;
use common\models\User;
use common\models\UserEducation;
use common\models\UserWork;
use common\models\Ads;
use frontend\models\cabinet\Editprofile1Form;
use frontend\models\cabinet\Editprofile2Form;
use frontend\models\cabinet\InfochangeForm;
use frontend\models\cabinet\PasswordchangeForm;
use frontend\models\cabinet\PasswordInfochangeForm;
use frontend\models\cabinet\UseradsForm;
use frontend\models\cabinet\UsereducationForm;
use frontend\models\cabinet\UserlangForm;
use frontend\models\cabinet\UserresumeForm;
use frontend\models\cabinet\UservacancyForm;
use frontend\models\cabinet\UserworkForm;
use frontend\models\cabinet\UserworkForm2;
use yii\web\HttpException;
use Yii;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use yii\web\NotFoundHttpException;
use yii\web\Response;
use yii\web\UploadedFile;


/**
 * Site controller
 */
class AdminController extends Controller
{

    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
//                'only' => ['index', 'profile'],
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ]

        ];
    }

    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }

    public function beforeAction($action)
    {
        $seoTag = Seo::findByurl(Yii::$app->request->url);
        if($seoTag) {
            if (!$seoTag->title) {
                Yii::$app->view->title = Yii::$app->params['site_name']." - ".Yii::t('app', 'Home page');
            } else {
                Yii::$app->view->title = $seoTag->title;
            }
            Yii::$app->view->registerMetaTag([
                'name' => 'description',
                'content' => $seoTag->description
            ]);
            Yii::$app->view->registerMetaTag([
                'name' => 'keywords',
                'content' => $seoTag->keywords
            ]);

            if ($action->id == 'index') {
                $this->enableCsrfValidation = false;
            }
        }else {
            Yii::$app->view->title = isset(Yii::$app->params['seotitle'])?Yii::$app->params['seotitle']:'';
            Yii::$app->view->registerMetaTag([
                'name' => 'description',
                'content' => isset(Yii::$app->params['seodescription'])?Yii::$app->params['seodescription']:''
            ]);
            Yii::$app->view->registerMetaTag([
                'name' => 'og:description',
                'content' => isset(Yii::$app->params['seodescription'])?Yii::$app->params['seodescription']:''
            ]);
        }

        if ($action->id == 'index') {
            $this->enableCsrfValidation = false;
        }

        if (isset(Yii::$app->user->identity) && Yii::$app->user->identity->isAdmin()) {
            return parent::beforeAction($action); // TODO: Change the autogenerated stub
        } else {
            throw new NotFoundHttpException();
        }
    }

    /**
     * Displays homepage.
     *
     * @return mixed
     */
    public function actionIndex()
    {
        if ($id = Yii::$app->request->get('user_id')) {
            $user = User::findOne(['id' => $id]);
        } else {
            $user = Yii::$app->user->identity;
        }
        $works_name = Purpose::find()->orderBy('title_'.Yii::$app->language)->asArray()->all();
        $works_name = ArrayHelper::getColumn($works_name, 'title_'.Yii::$app->language);
        $countries = NetCountry::find()->asArray()->orderBy('title_'.Yii::$app->language)->all();
        $countries_select = ArrayHelper::map($countries, 'id', 'name_'.Yii::$app->language);
        $countries = ArrayHelper::getColumn($countries, 'name_'.Yii::$app->language);
        $jobcat = PropertyType::find()->asArray()->all();
        $jobcat = ArrayHelper::map($jobcat, 'id', 'title_'.Yii::$app->language);
        $jobname = Purpose::find()->where(['jobcat_id' => $user->job_cat_id])->asArray()->all();
        $jobname = ArrayHelper::map($jobname, 'id', 'title_'.Yii::$app->language);
        $userworkmodels = (new UserworkForm())->find()->where(['user_id' => $user->id])->all();
        $usereducationmodels = (new UsereducationForm())->find()->where(['user_id' => $user->id])->all();
        $langs = json_decode($user->langjson, true);


        return $this->render('index', [
            'user' => $user,
            'jobcat' => $jobcat,
            'jobname' => $jobname,
            'works_name' => json_encode($works_name),
            'countries' => json_encode($countries),
            'countries_select' => $countries_select,
            'userworkmodels' => $userworkmodels,
            'usereducationmodels' => $usereducationmodels,
            'langs' => $langs,
        ]);
    }


    public function actionEditprofile()
    {
        if (Yii::$app->request->get('user_id') && Yii::$app->user->identity->isAdmin()) {
            $id = Yii::$app->request->get('user_id');
            $user = User::findOne(['id' => $id]);
            if (!$user) {
                throw new \yii\web\HttpException('404', 'Page not found');
            }
        }

//        $works_name = ArrayHelper::getColumn(Purpose::find()->orderBy('title_en')->asArray()->all(), 'title_en');
        $countries = NetCountry::find()->asArray()->orderBy('name_'.Yii::$app->language)->all();
        $countries_select = ArrayHelper::map($countries, 'id', 'name_'.Yii::$app->language);
        $countries = ArrayHelper::getColumn($countries, 'name_'.Yii::$app->language);
//        $jobcat = PropertyType::find()->asArray()->where(['title_en' => ''])->all();
//        $jobcat = ArrayHelper::map($jobcat, 'id', 'title_en');
        $jobname = [];

        $userprofile1 = Editprofile1Form::findOne(['id' => $user->id]);
        if ($userprofile1->load(\Yii::$app->request->post())) {
            if ($userprofile1->validate()) {
                $userprofile1->saveInfo();
                return $this->refresh();
            } else {
                \Yii::$app->session->setFlash('editprofile1error', reset(reset($userprofile1->getErrors())));
            }
        }

        $userprofile2 = Editprofile2Form::findOne(['id' => $user->id]);
//        if ($userprofile2->job_cat_id) {
//            $jobname = Purpose::find()->where(['jobcat_id' => $userprofile2->job_cat_id])->asArray()->all();
//            if ($jobname) {
//                $jobname = ArrayHelper::map($jobname, 'id', 'title_ru');
//            }
//        }
        if ($userprofile2->load(\Yii::$app->request->post())) {
            if ($userprofile2->validate()) {
                $userprofile2->saveInfo();
                return $this->refresh();
            } else {
                \Yii::$app->session->setFlash('editprofile1error', reset(reset($userprofile2->getErrors())));
            }
        }

        $userlangmodel = new UserlangForm();
        $userlangmodel->user_id = $user->id;
        $userlangmodel->langarray = json_decode($user->langjson, true);
        if ($userlangmodel->load(\Yii::$app->request->post())) {
            if ($userlangmodel->validate()) {
                $userlangmodel->saveInfo();
                return $this->refresh();
            } else {
                \Yii::$app->session->setFlash('userworkerror', reset(reset($userlangmodel->getErrors())));
            }
        }

        return $this->render('editprofile', [
            'user' => $user,
//            'jobcat' => $jobcat,
            'jobname' => $jobname,
//            'works_name' => json_encode($works_name),
            'userprofile1' => $userprofile1,
            'userprofile2' => $userprofile2,
            'countries' => json_encode($countries),
            'userlangmodel' => $userlangmodel,
            'countries_select' => $countries_select,
        ]);
    }

    public function actionAds()
    {
        if (Yii::$app->request->get('user_id') && Yii::$app->user->identity->isAdmin()) {
            $id = Yii::$app->request->get('user_id');
            $user = User::findOne(['id' => $id]);
            if (!$user) {
                throw new \yii\web\HttpException('404', 'Page not found');
            }
        }
        $works_name = Purpose::find()->orderBy('title_en')->asArray()->all();
        $works_name_id = ArrayHelper::map($works_name, 'id', 'title_'.Yii::$app->language);
        $works_name = ArrayHelper::getColumn($works_name, 'title_'.Yii::$app->language);

        $jobcat = PropertyType::find()->asArray()->all();
        $jobcat = ArrayHelper::map($jobcat, 'id', 'title_'.Yii::$app->language);
        $jobname = [];

        $uservacancymodels = (new Ads())->find()->where(['user_id' => $user->id, 'type_ad' => Ads::SALE])
            ->with(['adsAttachments', 'cityName', 'countryName'])->orderBy([
                'updated_at' => SORT_DESC
            ])->all();

        return $this->render('ads', [
            'uservacancymodel' => $uservacancymodels,
            'user' => $user,
            'jobcat' => $jobcat,
            'jobname' => $jobname,
            'works_name' => $works_name,
            'works_name_id' => $works_name_id,
            'uservacancymodels' => $uservacancymodels,
        ]);
    }

    public function actionResume()
    {
        if (Yii::$app->request->get('user_id') && Yii::$app->user->identity->isAdmin()) {
            $id = Yii::$app->request->get('user_id');
            $user = User::findOne(['id' => $id]);
            if (!$user) {
                throw new \yii\web\HttpException('404', 'Page not found');
            }
        }
        $works_name = Purpose::find()->orderBy('title_en')->asArray()->all();
        $works_name_id = ArrayHelper::map($works_name, 'id', 'title_'.Yii::$app->language);
        $works_name = ArrayHelper::getColumn($works_name, 'title_'.Yii::$app->language);

        $jobcat = PropertyType::find()->asArray()->all();
        $jobcat = ArrayHelper::map($jobcat, 'id', 'title_'.Yii::$app->language);
        $jobname = [];

        $uservacancymodels = (new Ads())->find()->where(['user_id' => $user->id, 'type_ad' => Ads::BUY])
            ->with(['adsAttachments', 'cityName', 'countryName'])->orderBy([
                'updated_at' => SORT_DESC
            ])->all();

        return $this->render('resume', [
            'uservacancymodel' => $uservacancymodels,
            'user' => $user,
            'jobcat' => $jobcat,
            'jobname' => $jobname,
            'works_name' => $works_name,
            'works_name_id' => $works_name_id,
            'uservacancymodels' => $uservacancymodels,
        ]);
    }


    // AJAX START


    public function actionAjaxdeletephoto()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if ($user = User::findOne(['id' => Yii::$app->request->post('user_id')])) {
            $user->photo = '';
            if ($user->save()) {
                return true;
            }
        }
        return false;
    }

    public function actionAjaxdeletephotoprofile()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if ($user = User::findOne(['id' => Yii::$app->request->post('user_id')])) {
            $user->photoprofile = '';
            if ($user->save()) {
                return true;
            }
        }
        return false;
    }

    public function actionAjaxdeleterecord()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        $post = Yii::$app->request->post();
        if ($post && $post['record_id']) {
            if ($post['type'] == 'ads') {
                $model = Ads::findOne(['id' => $post['record_id']]);
                if ($model && $model->delete()) {
                    return ['success' => true];
                }
            }
        }
        return false;
    }

    public function actionAjaxchangeactive()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        $post = Yii::$app->request->post();
        if ($post && $post['record_id'] && $post['type']) {
            $model = Ads::findOne(['id' => $post['record_id']]);
            if ($model) {
                $model->active = $post['value'];
                if ($model->save(false)) {
                    return ['success' => true];
                }
            }
        }
        return false;

    }

    public function actionAjaxrenewrecord()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        $post = Yii::$app->request->post();
        if ($post && $post['record_id'] && $post['type']) {
            $model = Ads::findOne(['id' => $post['record_id'], 'user_id' => Yii::$app->request->post('user_id')]);
//            if ($model && $model->updated_at + 604800 <= time()) {
                $model->updated_at = time();
                if ($model->save(false)) {
                    return ['success' => true];
                }
//            }
        }
        return false;

    }


    // AJAX END

}
