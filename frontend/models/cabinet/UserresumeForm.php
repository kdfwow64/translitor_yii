<?php

namespace frontend\models\cabinet;

use common\components\DateToTimeBehavior;
use common\components\FilesUpload;
use common\models\AdsAttributeValue;
use common\models\Attributes;
use common\models\JobsName;
use common\models\NetCity;
use common\models\NetCountry;
use common\models\Resume;
use common\models\User;
use common\models\UserWork;
use common\models\Vacancies;
use Yii;
use yii\base\Model;
use yii\base\ModelEvent;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;
use yii\helpers\Inflector;
use yii\web\UploadedFile;

/**
 * ContactForm is the model behind the contact form.
 */
class UserresumeForm extends Resume
{
    public $model_id;
    public $cities = [];

//    public function behaviors()
//    {
//        return [
//            [
//                'class' => DateToTimeBehavior::className(),
//                'attributes' => [
//                    ActiveRecord::EVENT_BEFORE_VALIDATE => 'birthday_formatted',
//                    ActiveRecord::EVENT_AFTER_FIND => 'birthday_formatted',
//                ],
//                'timeAttribute' => 'birthday'
//            ]
//        ];
//    }

    public function beforeValidate()
    {

        if ($this->country) {
            $city = NetCity::find()->where(['country_id' => $this->country])->asArray()->orderBy('name_en')->all();
            $this->cities = ArrayHelper::map($city, 'id', 'name_en');
        }

        $this->created_at = time();
        $this->updated_at = time();
        return parent::beforeValidate();
    }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'title', 'desc', 'cat_id', 'created_at', 'updated_at', 'price', 'type_id', 'country',
                'city', 'contact_phone', 'contact_email', 'contact_name'], 'required'],
            [['user_id', 'price', 'cat_id', 'type_id', 'active', 'admin_check', 'created_at', 'updated_at', 'model_id', 'contact_phone'], 'integer'],
            [['desc', 'working', 'contact_name'], 'string'],
            [['contact_email'], 'email'],
            [['title'], 'string', 'max' => 500],
            [['contact_phone', 'contact_email', 'country', 'city'], 'string', 'max' => 100],
            [['attachments', 'lang'], 'safe']
        ];
    }

    public function init()
    {
        $this->user_id = Yii::$app->user->getId();
        parent::init();
    }

    public function afterFind()
    {
//        $this->user_id = Yii::$app->user->getId();
        if ($this->country && !$this->cities) {
            $city = NetCity::find()->where(['country_id' => $this->country])->asArray()->orderBy('name_en')->all();
            $this->cities = ArrayHelper::map($city, 'id', 'name_en');
        }
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

//    public function getCities(){
//        if ($this->country_id && !$this->cities) {
//            $city = NetCity::find()->where(['country_id' => $this->country_id])->asArray()->orderBy('name_ru')->all();
//            return  ArrayHelper::map($city, 'id', 'name_ru');
//        }
//    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user_id' => 'User ID',
            'title' => 'Job title',
            'desc' => 'Description',
            'contact_name' => 'Contact name',
            'contact_phone' => 'Contact number',
            'contact_email' => 'E-mail',
            'price' => 'Price â‚¬',
            'country' => 'Country',
            'city' => 'City',
            'cat_id' => 'Category',
            'type_id' => 'Purpose',
            'working' => 'Type of employment',
            'lang' => 'Language knowledge',
            'active' => 'Job Status',
            'admin_check' => 'Admin Check',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    public function saveInfo()
    {
        if ($this->model_id) {
            $model = self::findOne(['id' => $this->model_id]);
            $model->load(Yii::$app->request->post());
            $model->lang = json_encode($model->lang, JSON_UNESCAPED_UNICODE);
            if ($model->save()) {
                Yii::$app->session->setFlash('success' . $model->id, 'Profile updated');
                return $model;
            }

        }
        $this->lang = json_encode($this->lang, JSON_UNESCAPED_UNICODE);
        if ($this->save()) {
            Yii::$app->session->setFlash('success', 'Profile updated');
            return $this;
        }
    }

    public function saveCategoryAttributes($params, $model)
    {
        $allAttributes = Attributes::find()->asArray()->all();

        foreach ($allAttributes as $key => $value) {
            $allAttributes[$key]['slug'] = Inflector::variablize($value['slug']);
        }

        $allAttributes = ArrayHelper::index($allAttributes, 'slug');

        foreach ($params as $key => $value) {
            if (is_array($value)) {
                foreach ($value as $val) {
                    $newmodel = new AdsAttributeValue();
                    $newmodel->ads_id = $model->id;
                    $newmodel->attribute_id = $allAttributes[$key]['id'];
                    $newmodel->attribute_value_id = $val;
                    $newmodel->save();
                }
            }
            else {
                $newmodel = new AdsAttributeValue();
                $newmodel->ads_id = $model->id;
                $newmodel->attribute_id = $allAttributes[$key]['id'];
                $newmodel->attribute_value_id = $value;
                $newmodel->save();
            }
        }
    }
}
