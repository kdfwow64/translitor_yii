<?php

namespace frontend\models\cabinet;

use common\models\Ads;
use common\models\AdsAttachment;
use common\models\AdsAttributeValue;
use common\models\Attributes;
use common\models\FileStorageItem;
use common\models\Purpose;
use common\models\NetCity;
use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\Inflector;

/**
 * ContactForm is the model behind the contact form.
 */
class UseradsForm extends Ads
{
    public $model_id;
    public $cities = [];

//    public function behaviors()
//    {
//        return [
//            [
//                'class' => DateToTimeBehavior::className(),
//                'attributes' => [
//                    ActiveRecord::EVENT_BEFORE_VALIDATE => 'birthday_formatted',
//                    ActiveRecord::EVENT_AFTER_FIND => 'birthday_formatted',
//                ],
//                'timeAttribute' => 'birthday'
//            ]
//        ];
//    }

    /**
     * @return bool
     */
    public function beforeValidate()
    {
        if ($this->country) {
            $city         = NetCity::find()->where(['country_id' => $this->country])->asArray()->orderBy('name_en')->all();
            $this->cities = ArrayHelper::map($city, 'id', 'name_'.Yii::$app->language);
        }

        $this->created_at = time();
        $this->updated_at = time();
        return parent::beforeValidate();
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'title', 'desc', 'cat_id', 'created_at', 'updated_at', 'type_id', 'country',
                'city', 'contact_email', 'contact_name'], 'required'],
            [['user_id', 'price', 'cat_id', 'type_id', 'active', 'admin_check', 'created_at', 'updated_at', 'model_id',
                'contact_phone', 'currency', 'price_negotiable'], 'integer'],
            [['desc', 'working', 'contact_name'], 'string'],
            [['contact_email'], 'email'],
            [['title'], 'string', 'max' => 500],
            [['contact_phone', 'contact_email', 'country', 'city'], 'string', 'max' => 100],
            [['attachments', 'lang', 'price_negotiable'], 'safe']
        ];
    }

    /**
     *
     */
    public function init()
    {
        $this->user_id = Yii::$app->user->getId();
        parent::init();
    }

    /**
     *
     */
    public function afterFind()
    {
        if ($this->country && !$this->cities) {
            $city         = NetCity::find()->where(['country_id' => $this->country])->orderBy('name_'.Yii::$app->language)->all();
            $this->cities = ArrayHelper::map($city, 'id', 'name_'.Yii::$app->language);
        }

        if ($this->lang) {
            $this->lang = explode(',', $this->lang);
        }
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

//    public function getCities(){
//        if ($this->country_id && !$this->cities) {
//            $city = NetCity::find()->where(['country_id' => $this->country_id])->asArray()->orderBy('name_ru')->all();
//            return  ArrayHelper::map($city, 'id', 'name_ru');
//        }
//    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id'            => 'ID',
            'user_id'       => 'User ID',
            'title'         => Yii::t('app', 'Property title'),
            'desc'          => Yii::t('app', 'Description'),
            'contact_name'  => Yii::t('app', 'Contact name'),
            'contact_phone' => Yii::t('app', 'Contact number'),
            'contact_email' => Yii::t('app', 'E-mail'),
            'price'         => Yii::t('app', 'Price'),
            'currency'      => Yii::t('app', 'Currency'),
            'country'       => Yii::t('app', 'Country'),
            'city'          => Yii::t('app', 'City'),
            'cat_id'        => Yii::t('app', 'Property type'),
            'type_id'       => Yii::t('app', 'Purpose'),
            'working'       => Yii::t('app', 'Provided by'),
            'lang'          => Yii::t('app', 'Language knowledge'),
            'active'        => Yii::t('app', 'Job Status'),
            'admin_check'   => Yii::t('app', 'Admin Check'),
            'created_at'    => Yii::t('app', 'Created At'),
            'updated_at'    => Yii::t('app', 'Updated At'),
        ];
    }

    /**
     * Save ad details and delete unwanted files
     *
     * @return $this|null|static
     */
    public function saveInfo()
    {
        $array_attachments = (is_array($this->attachments)) ? ArrayHelper::getColumn($this->attachments, 'path') : [];
        $array_adsAttachments = ArrayHelper::getColumn($this->adsAttachments, 'path');
        $diff_attach = array_diff($array_adsAttachments, $array_attachments);

        foreach ($diff_attach as $file) {
            AdsAttachment::find()->where(['path' => $file])->one()->delete();
            FileStorageItem::find()->where(['path' => $file])->one()->delete();

            if (file_exists(Yii::getAlias('@webroot/uploads/thumb/' . $file))) {
                unlink(Yii::getAlias('@webroot/uploads/thumb/' . $file));
            }
            if (file_exists(Yii::getAlias('@webroot/uploads/source/' . $file))) {
                unlink(Yii::getAlias('@webroot/uploads/source/' . $file));
            }
        }

        $this->lang = ($this->lang) ? implode(',', $this->lang) : NULL;

        if ($this->save()) {
            Yii::$app->session->setFlash('success', 'Profile updated');
            return $this;
        }
    }

    /**
     * Saving attributes of ads
     *
     * @param $params
     * @param $model
     */
    public function saveCategoryAttributes($params, $model)
    {
        AdsAttributeValue::deleteAll([
            'ads_id' => $model->id
        ]);

        $allAttributes = Attributes::find()->asArray()->all();

        foreach ($allAttributes as $key => $value) {
            $allAttributes[$key]['slug'] = Inflector::variablize($value['slug']);
        }

        $allAttributes = ArrayHelper::index($allAttributes, 'slug');

        foreach ($params as $key => $value) {
            if (is_array($value)) {
                foreach ($value as $val) {
                    $newmodel = new AdsAttributeValue();
                    $newmodel->ads_id = $model->id;
                    $newmodel->attribute_id = $allAttributes[$key]['id'];
                    $newmodel->attribute_value_id = $val;
                    $newmodel->save();
                }
            }
            else {
                $newmodel = new AdsAttributeValue();
                $newmodel->ads_id = $model->id;
                $newmodel->attribute_id = $allAttributes[$key]['id'];
                $newmodel->attribute_value_id = $value;
                if(!$newmodel->save())
                {
                    //var_dump($newmodel->errors);
                    //die;
                }
            }
        }
    }
}
